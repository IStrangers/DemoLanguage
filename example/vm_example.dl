var a = 99.99
var b = true
var c = false
var d = null
fun isOne(a) {
    return a == 1
}
var r
switch a {
    case 1 {
        r = 1
    }
    case 2 {
        r = 2
    }
    default {
        r = 0
    }
}
for var i = 0;;i++ {
    if isOne(i) {
        break
    } else {
        continue
    }
}
if r == 1 {
    println("one")
} else if r == 2 {
    println("tow")
} else {
    println("zero")
}
var arr = [1,"2",'3',true,false,{key: "key",value: "value"}]
var obj = {
    arr: [
        {
          name: "name1",
          count: 1,
        }
        ,
        ,
        {
          name: "name2",
          count: 2
        }
    ],
    outArr: fun() {
        println(this)
        for var i = 0;i < this.arr.size();i++ {
            println(this.arr[i])
        }
    },
    arrowFun1: (p1) -> {
        return p1 * 2
    },
    arrowFun2: p1 -> p1 / 2
}
var arrowFun1 = (p1) -> {
    return p1 * 2
}
var arrowFun2 = p1 -> p1 / 2
println(arrowFun2(10))
println(this)
println(arr[0],arr[r])
println(obj.arr,obj["arr"])
obj.outArr()
println(a)
a += 100
println(a)
a -= 50
println(a)
a *= 25
println(a)
a /= 10
println(a)
a &= 40
println(a)
a |= 5010
println(a)
for var index = 1;index < 100;index++ {
    if index % 5 == 0 || (index >= 90 && index != 95) {
        if index == 5 {
            continue
        }
        a = index
        break
    }
}
fun add(a = 1,b = 1) {
    return a + b
}
println(add(100))
fun getFebNum(n) {
    if n == 1 || n == 2 {
        return 1
    } else {
        return getFebNum(n - 1) + getFebNum(n - 2)
    }
}
println(getFebNum(20))
var obj1 = {
    name: "Afghanistan",
    count: add(),
    ref: c,
    inline: {
        ref: a
    },
    arrowFun1: (p1) -> {
        println(p1 + " * 2")
        return p1 * 2
    },
    arrowFun2: p1 -> p1 / 2
}
var arr1 = [obj1.inline.ref,"sfd",500]
arr1.add(555)
arr1.remove(2)
var v = arr1.get(arr1.size() - 1)
arr1[0] = v
obj1["name"] = 123
obj1.name = "564654"
println(obj1)
println(arr1)
var arrowFun = p1 -> p1 / 2
println(arrowFun(5))
println(obj1.arrowFun1(500))
var fs = -100
println(fs)
println(+fs)
fun testClosure(a = "1") {
    var df = "东风"
    return fun(b = "2") {
        return fun() {
            return df + a + b
        }
    }
}
println(testClosure()()())
fun testClosure1(a = "1") {
    var s = fun(b = "2") {
        return a + b
    }
    return s()
}
println(testClosure1())
fun testException() {
    try {
        throw {value: "exception"}
    } catch(e) {
        println(e)
    } finally {
        println("finally")
    }
}
testException()
class TestExtends{

    private test1
    public test2

    public setTest1(test1) {
        this.test1 = test1
    }

    public getE() {
        return this.test1
    }

}
class CustomClass {

    public static CLASS_NAME = "CustomClass"

    static {
        CLASS_NAME = ""
    }

    private value
    public name

    public CustomClass(name) {
        this.name = name
    }

    public getValue() {
        return this.value
    }

    public setValue(value) {
        this.value = value
    }

}
println(CustomClass)
var customObj = new CustomClass("CustomClass")
println(customObj)